module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent string -> failure x
transNegChan :: NegChan -> Result
transNegChan x = case x of
  NegChan string -> failure x
transReftIdent :: ReftIdent -> Result
transReftIdent x = case x of
  ReftIdent string -> failure x
transDecInt :: DecInt -> Result
transDecInt x = case x of
  DecInt string -> failure x
transHexInt :: HexInt -> Result
transHexInt x = case x of
  HexInt string -> failure x
transOctInt :: OctInt -> Result
transOctInt x = case x of
  OctInt string -> failure x
transBinInt :: BinInt -> Result
transBinInt x = case x of
  BinInt string -> failure x
transLabel :: Label -> Result
transLabel x = case x of
  LabelLIdent lident -> failure x
  LabelDecInt decint -> failure x
transAnyInt :: AnyInt -> Result
transAnyInt x = case x of
  AnyIntDec decint -> failure x
  AnyIntHex hexint -> failure x
  AnyIntOct octint -> failure x
  AnyIntBin binint -> failure x
transLSpc1LIdent :: LSpc1LIdent -> Result
transLSpc1LIdent x = case x of
  LSpc1LIdentCon lident lspclident -> failure x
  LSpc1LIdentNil lident -> failure x
transLCom1LIdent :: LCom1LIdent -> Result
transLCom1LIdent x = case x of
  LCom1LIdentCon lident lcomlident -> failure x
  LCom1LIdentNil lident -> failure x
transBaseType :: BaseType -> Result
transBaseType x = case x of
  BTypeFun refinedtype1 refinedtype2 -> failure x
  BTypeFunDep lident refinedtype1 refinedtype2 -> failure x
  BTypeVar lident -> failure x
  BTypeRecEmp -> failure x
  BTypeRecPoly lident -> failure x
  BTypeRec lcomrowtype -> failure x
  BTypeRecExt lcomrowtype lident -> failure x
  BTypeTup lcomreftype -> failure x
  BTypeArr refinedtype anyint -> failure x
  BTypeAlias alias -> failure x
transLCom1RowType :: LCom1RowType -> Result
transLCom1RowType x = case x of
  LCom1RowTypeCon lident refinedtype lcomrowtype -> failure x
  LCom1RowTypeNil lident refinedtype -> failure x
transLCom1RefType :: LCom1RefType -> Result
transLCom1RefType x = case x of
  LCom1RefTypeCon refinedtype lcomreftype -> failure x
  LCom1RefTypeNil refinedtype -> failure x
transLCom2RefType :: LCom2RefType -> Result
transLCom2RefType x = case x of
  LCom2RefTypeCon refinedtype lcomreftype -> failure x
  LCom2RefTypeNil refinedtype1 refinedtype2 -> failure x
transRefinedType :: RefinedType -> Result
transRefinedType x = case x of
  RTypeBase0 basetype -> failure x
  RTypeQualFun lident basetype expr -> failure x
  RTypeQualBase lident basetype expr -> failure x
  RTypeBase1 basetype -> failure x
  RTypeBase2 basetype -> failure x
transPattern :: Pattern -> Result
transPattern x = case x of
  PatPar lbarpattern -> failure x
  PatVar lident -> failure x
  PatVarAt lident pattern -> failure x
  PatConArg lident lcompattern -> failure x
  PatCon lident -> failure x
  PatWild -> failure x
  PatInt anyint -> failure x
  PatNegInt decint -> failure x
  PatRecEmp -> failure x
  PatRec lcomrecpat -> failure x
  PatRecPoly lcomrecpat lident -> failure x
  PatRecWild lcomrecpat -> failure x
  PatTup lcompattern -> failure x
  PatArr lcompattern -> failure x
transLCom1Pattern :: LCom1Pattern -> Result
transLCom1Pattern x = case x of
  LCom1PatternCon pattern lcompattern -> failure x
  LCom1PatternNil pattern -> failure x
transLCom2Pattern :: LCom2Pattern -> Result
transLCom2Pattern x = case x of
  LCom2PatternCon pattern lcompattern -> failure x
  LCom2PatternNil pattern1 pattern2 -> failure x
transLBar2Pattern :: LBar2Pattern -> Result
transLBar2Pattern x = case x of
  LBar2PatternCon pattern lbarpattern -> failure x
  LBar2PatternNil pattern1 pattern2 -> failure x
transLCom1RecPat :: LCom1RecPat -> Result
transLCom1RecPat x = case x of
  LCom1RecPatCon lident pattern lcomrecpat -> failure x
  LCom1RecPatNil lident pattern -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EAbs lcompattern expr -> failure x
  EAbsCase lsemicase -> failure x
  ECase expr lsemicase -> failure x
  ELet lsemilet expr -> failure x
  EIf expr1 expr2 expr3 -> failure x
  EMultiIf lsemimulti -> failure x
  EIff expr1 expr2 -> failure x
  EImp expr1 expr2 -> failure x
  ELogOr expr1 expr2 -> failure x
  ELogAnd expr1 expr2 -> failure x
  EEq expr1 expr2 -> failure x
  ENotEq expr1 expr2 -> failure x
  EGtEq expr1 expr2 -> failure x
  ELtEq expr1 expr2 -> failure x
  EGt expr1 expr2 -> failure x
  ELt expr1 expr2 -> failure x
  EPlus expr1 expr2 -> failure x
  EMinus expr1 expr2 -> failure x
  ETimes expr1 expr2 -> failure x
  EDiv expr1 expr2 -> failure x
  EMod expr1 expr2 -> failure x
  ELogNot expr -> failure x
  ENegate expr -> failure x
  ERecSel expr label -> failure x
  ERecRem expr label -> failure x
  EInt anyint -> failure x
  EVar lident -> failure x
  EReftVar reftident -> failure x
  EApp expr lcomexpr -> failure x
  ETup lcomexpr -> failure x
  EArr lcomexpr -> failure x
  ERecEmpt -> failure x
  ERec lcomrecexpr -> failure x
  ERecPoly lcomrecexpr expr -> failure x
transLSemi1Case :: LSemi1Case -> Result
transLSemi1Case x = case x of
  LSemi1CaseCon pattern expr lsemicase -> failure x
  LSemi1CaseNil pattern expr -> failure x
transLSemi1Let :: LSemi1Let -> Result
transLSemi1Let x = case x of
  LSemi1LetCon pattern expr lsemilet -> failure x
  LSemi1LetNil pattern expr -> failure x
transLSemi1Multi :: LSemi1Multi -> Result
transLSemi1Multi x = case x of
  LSemi1MultiCon expr1 expr2 lsemimulti -> failure x
  LSemi1MultiNil expr1 expr2 -> failure x
transLCom1Expr :: LCom1Expr -> Result
transLCom1Expr x = case x of
  LCom1ExprCon expr lcomexpr -> failure x
  LCom1ExprNil expr -> failure x
transLCom2Expr :: LCom2Expr -> Result
transLCom2Expr x = case x of
  LCom2ExprCon expr lcomexpr -> failure x
  LCom2ExprNil expr1 expr2 -> failure x
transLCom1RecExpr :: LCom1RecExpr -> Result
transLCom1RecExpr x = case x of
  LCom1RecExtendCon lident expr lcomrecexpr -> failure x
  LCom1RecRenameCon lident1 lident2 lcomrecexpr -> failure x
  LCom1RecUpdateCon lident expr lcomrecexpr -> failure x
  LCom1RecExtendNil lident expr -> failure x
  LCom1RecRenameNil lident1 lident2 -> failure x
  LCom1RecUpdateNil lident expr -> failure x
transAnyType :: AnyType -> Result
transAnyType x = case x of
  AnyTypeRType refinedtype -> failure x
  AnyTypeSess session -> failure x
  AnyTypeAlias alias -> failure x
transLCom1AnyType :: LCom1AnyType -> Result
transLCom1AnyType x = case x of
  LCom1AnyTypeCon anytype lcomanytype -> failure x
  LCom1AnyTypeNil anytype -> failure x
transAlias :: Alias -> Result
transAlias x = case x of
  AliasNoParam uident -> failure x
  AliasParam uident lcomanytype maybelcomexpr -> failure x
transMaybeLCom1Expr :: MaybeLCom1Expr -> Result
transMaybeLCom1Expr x = case x of
  MaybeLCom1ExprJust lcomexpr -> failure x
  MaybeLCom1ExprNothing -> failure x
transSession :: Session -> Result
transSession x = case x of
  SessRec uident session -> failure x
  SessGet anytype session -> failure x
  SessPut anytype session -> failure x
  SessSel lcomschoice -> failure x
  SessCho lcomschoice -> failure x
  SessDual session -> failure x
  SessEnd -> failure x
  SessAlias alias -> failure x
transLCom1SChoice :: LCom1SChoice -> Result
transLCom1SChoice x = case x of
  LCom1SChoiceCon lident session lcomschoice -> failure x
  LCom1SChoiceNil lident session -> failure x
transChanExp :: ChanExp -> Result
transChanExp x = case x of
  ChanExprNeg negchan -> failure x
  ChanExprExp expr -> failure x
transChan :: Chan -> Result
transChan x = case x of
  ChanPos lident -> failure x
  ChanNeg negchan -> failure x
transProc :: Proc -> Result
transProc x = case x of
  ProcPar lbarparproc -> failure x
  ProcLet pattern expr proc -> failure x
  ProcNew lident session proc -> failure x
  ProcGet chan pattern proc -> failure x
  ProcPut chan chanexp proc -> failure x
  ProcSel chan lident proc -> failure x
  ProcChoice chan lcompchoice -> failure x
  ProcRec lident lcomrecproc proc -> failure x
  ProcNamed lident lcomchanexp -> failure x
  ProcFwd chan1 chan2 -> failure x
  ProcEnd -> failure x
transLCom1ChanExp :: LCom1ChanExp -> Result
transLCom1ChanExp x = case x of
  LCom1ChanExpCon chanexp lcomchanexp -> failure x
  LCom1ChanExpNil chanexp -> failure x
transLCom1PChoice :: LCom1PChoice -> Result
transLCom1PChoice x = case x of
  LCom1PChoiceCon lident proc lcompchoice -> failure x
  LCom1PChoiceNil lident proc -> failure x
transLCom1RecProc :: LCom1RecProc -> Result
transLCom1RecProc x = case x of
  LCom1RecProcCon pattern chanexp lcomrecproc -> failure x
  LCom1RecProcNil pattern chanexp -> failure x
transLBar2ParProc :: LBar2ParProc -> Result
transLBar2ParProc x = case x of
  LBar2ParProcCon proc lbarparproc -> failure x
  LBar2ParProcNil proc1 proc2 -> failure x
transDataCon :: DataCon -> Result
transDataCon x = case x of
  DataConEmpt lident -> failure x
  DataConArgs lident lcomreftype -> failure x
transLBar1DataCon :: LBar1DataCon -> Result
transLBar1DataCon x = case x of
  LBar1DataConCon datacon lbardatacon -> failure x
  LBar1DataConNil datacon -> failure x
transTScheme :: TScheme -> Result
transTScheme x = case x of
  TPoly lspclident refinedtype -> failure x
  TMono refinedtype -> failure x
transTop :: Top -> Result
transTop x = case x of
  TopTypeDef lident tscheme -> failure x
  TopType uident anytype -> failure x
  TopTypeParam uident lcomlident anytype -> failure x
  TopData uident lbardatacon -> failure x
  TopDataParam uident lcomlident lbardatacon -> failure x
  TopExpr lident expr -> failure x
  TopFunc lident lcompattern expr -> failure x
  TopPat pattern expr -> failure x
  TopProc lident lcompattern proc -> failure x
transLTop :: LTop -> Result
transLTop x = case x of
  LTopCon top ltop -> failure x
  LTopNil top -> failure x

