-- Note: All grammar labels and productions are prefixed with "G" in order to
-- differentiate them from types in the target language that may have the same
-- name

-- tokens

token UIdent (upper (letter | digit | '_')*) ;
token LIdent (lower (letter | digit | '_')*) ;
token IntTok ('0' | ('~'? ["123456789"] digit*)) ;
token HexInt ({"0x"} digit+) ;
token BitPat ('b' ["01"]+) ;

rules GAnyInt ::= IntTok | HexInt | BitPat ;

-- Sequential language

GUnit.       GUnit ::= "{}" ;

GTNamedParam. GTNamedParam ::= GType ;
separator GTNamedParam "," ;

GTNamedNoParam. GTNamedParams ::= ;
GTNamedParams.  GTNamedParams ::= "(" [GTNamedParam] ")" ;

GTTupArg.    GTTupArg ::= GType ;
separator    nonempty GTTupArg "," ;

GTVars.      GTVars ::= LIdent ;
terminator   GTVars "" ;

GTInt.       GType ::= "Int" ;
GTBool.      GType ::= "Bool" ;
GTUnit.      GType ::=  GUnit ;
GTTup.       GType ::= "{" [GTTupArg] "}";
GTNamed.     GType ::= UIdent GTNamedParams ;
GTTVar.      GType ::= LIdent ;

-- Struct element is an accessor followed by a type
GTStructFieldName. GTStructFieldName ::= LIdent ;
GTStructElement.   GTStructElement   ::= GTStructFieldName "::" GType ;
separator          nonempty GTStructElement "," ;

GTEnumElemNoTy.   GTEnumElem ::= LIdent ;
GTEnumElemWithTy. GTEnumElem ::= LIdent GType ;
separator         nonempty GTEnumElem "," ;

GTStructDef.      GTStructDef ::= [GTVars] "{" [GTStructElement] "}" ;
GTEnumDef.     GTEnumDef ::= [GTVars] "{" [GTEnumElem] "}" ;

GELetIdent.  GELetIdent ::= LIdent "=" GExpr ;
terminator   GELetIdent ";" ;

GELetExpr.   GELetExpr ::= [GELetIdent] GExpr ;

GEAppArg.    GEAppArg ::= GExpr ;
separator    nonempty GEAppArg "," ;

GEAbsArg.    GEAbsArg ::= LIdent ;
terminator   nonempty GEAbsArg "" ;

-- tuple args can't be empty (GEUnit handles this)
GETupArg.    GETupArg ::= GExpr ;
separator    nonempty GETupArg "," ;

----- Begin operators -----

-- Haskell precedence 0
GERightApp.  GExpr0 ::= GExpr0 "$>" GExpr1 ;
GELeftApp.   GExpr1 ::= GExpr2 "<$" GExpr1 ;

-- Haskell precedence 1
--GEBind.      GExpr2 ::= GExpr2 ">>=" GExpr3 ;
--GESeq.       GExpr2 ::= GExpr2 ">>"  GExpr3 ;

-- Haskell precedence 2
GELogOr.     GExpr3 ::= GExpr4 "||" GExpr3 ;

-- Haskell precedence 3
GELogAnd.    GExpr4 ::= GExpr5 "&&" GExpr4 ;

-- Haskell precedence 4
GEEq.        GExpr5 ::= GExpr5 "==" GExpr5 ;
GENotEq.     GExpr5 ::= GExpr5 "!=" GExpr5 ;
GEGtEq.      GExpr5 ::= GExpr5 ">=" GExpr5 ;
GELtEq.      GExpr5 ::= GExpr5 "<=" GExpr5 ;
GEGt.        GExpr5 ::= GExpr5 ">"  GExpr5 ;
GELt.        GExpr5 ::= GExpr5 "<"  GExpr5 ;
-- elem, notElem

-- Haskell precedence 5
-- cons, append

-- Haskell precedence 6
GEPlus.      GExpr7 ::= GExpr7 "+" GExpr8 ;
GEMinus.     GExpr7 ::= GExpr7 "-" GExpr8 ;

-- Haskell precedence 7
GETimes.     GExpr8 ::= GExpr8 "*" GExpr9 ;
GEDiv.       GExpr8 ::= GExpr8 "/" GExpr9 ;
GEMod.       GExpr8 ::= GExpr8 "%" GExpr9 ;
-- rem, quot, div

-- Haskell precedence 8
-- Power operators
GEBitCat.    GExpr9  ::= GExpr10 "#" GExpr9 ;

-- Haskell precedence 9
GERightComp. GExpr10 ::= GExpr10  "o>" GExpr11 ;
GELeftComp.  GExpr11 ::= GExpr12 "<o" GExpr11 ;

GELogNot.    GExpr12 ::= "!" GExpr12 ;

----- End operators -----

GEIf.        GExpr13 ::= "if" GExpr "{" GELetExpr "}" "else" "{" GELetExpr "}" ;

GEApp.       GExpr14 ::= GExpr14 "(" [GEAppArg] ")" ;

GEAbs.       GExpr15 ::= "\\" [GEAbsArg] "->" "{" GELetExpr "}" ;

GEScopeIdent. GEScopeArg ::= "::" LIdent ;
GEScopeIndex. GEScopeArg ::= "::" IntTok ;
terminator    GEScopeArg "" ;

GEScopeArgNE. GEScopeArgNE ::= GEScopeArg ;
terminator nonempty GEScopeArgNE "" ;

GETrue.      GExpr16 ::= "true" ;
GEFalse.     GExpr16 ::= "false" ;
GEInt.       GExpr16 ::= IntTok ;
GEVar.       GExpr16 ::= LIdent ;
GEScopedFn.  GExpr16 ::= UIdent GEScopeArg ;
GEUnit.      GExpr16 ::= GUnit ;
GETup.       GExpr16 ::= "{" [GETupArg] "}" ;

coercions    GExpr 16 ;

-- Hardware language

GHwArea.    GHwArea ::= "area" UIdent "@" HexInt GTStructDef ;
terminator  GHwArea "" ;

-- Defines the type of the special state variable. Either an existing type
-- or a new structure definition
GHwStateDefTy. GHwStateDef ::= GType ";" ;
GHwStateDefSt. GHwStateDef ::= GTStructDef ;

GHwState.   GHwState ::= "state" GHwStateDef ;

GHwChan.    GHwChan ::= "channel" ;
terminator nonempty GHwChan ";" ;

-- Sequences of interaction with memory, either an area or the state
GHwSeqLocState. GHwSeqLoc ::= "state" [GEScopeArg] ;
GHwSeqLocArea.  GHwSeqLoc ::= UIdent [GEScopeArgNE] ;

rules GHwVal ::= LIdent | GExpr ;

GHwSeqLet.   GHwSeq ::= LIdent "=" GExpr ;
GHwSeqRead.  GHwSeq ::= GHwSeqLoc "->" LIdent ;
GHwSeqWrite. GHwSeq ::= GHwSeqLoc "<-" GHwVal ;
terminator nonempty GHwSeq ";" ;

GHwInit.    GHwInit ::= "init" "=" "{" [GHwSeq] "}" ;
GHwHandler. GHwHandler ::= "handler" LIdent "=" "{" [GHwSeq] "}" ;

-- Top level grammar

GTDefStruct. GTypeDef ::= "struct" UIdent GTStructDef ;
GTDefEnum.   GTypeDef ::= "enum" UIdent GTEnumDef ;
--GTDefAlias. GTypeDef ::= "alias" UIdent [GTVars] "=" GType ;

GFuncArg.   GFuncArg ::= LIdent ;
separator nonempty GFuncArg "," ;

GGlobal.    GGlobal ::= LIdent "=" GExpr ";" ;
GFunc.      GFunc ::= "func" LIdent "(" [GFuncArg] ")" "{" GExpr "}" ;
GProc.      GProc ::= "proc" UIdent "(" ")" "{" "}" ;
GHwproc.    GHwproc ::= "hwproc" UIdent "{" "interrupt" HexInt ";" [GHwArea]
                        GHwState [GHwChan] GHwInit GHwHandler "}" ;

rules GTopDef ::= GTypeDef | GGlobal | GFunc | GProc | GHwproc ;
terminator  GTopDef "" ;

GProg.      GProg ::= [GTopDef] ;

comment "//" ;

-- Only export nessecary parsers.
entrypoints GProg, GTypeDef, GType, GExpr, GHwproc, GHwSeq ;

