-- Note: All grammar labels and productions are prefixed with "G" in order to
-- differentiate them from types in the target language that may have the same
-- name

-- tokens

token UIdent (upper (letter | digit | '_')*) ;
token LIdent (lower (letter | digit | '_')*) ;
token DecInt ('0' | ('~'? ["123456789"] digit*)) ;
token HexInt ({"0x"} digit+) ;
token OctInt ('o' digit+) ;
token BinInt ('b' ["01"]+) ;

rules GAnyInt ::= DecInt | HexInt | OctInt | BinInt ;

GChoiceLabel. GChoiceLabel ::= LIdent ;

GScopedIdent. GScopedIdent ::= [GScopeElem] ;
GScopeElem.   GScopeElem ::= LIdent ;
separator nonempty GScopeElem "::" ;

-- Sequential grammar

GUnit.       GUnit ::= "{}" ;

GTNamedParam. GTNamedParam ::= GType ;
separator GTNamedParam "," ;

GTNamedNoParam. GTNamedParams ::= ;
GTNamedParams.  GTNamedParams ::= "(" [GTNamedParam] ")" ;

GTTupArg.    GTTupArg ::= GType ;
separator    nonempty GTTupArg "," ;

GTVars.      GTVars ::= LIdent ;
terminator   GTVars "" ;

GTInt.       GType ::= "Int" ;
GTBool.      GType ::= "Bool" ;
GTUnit.      GType ::=  GUnit ;
GTTup.       GType ::= "{" [GTTupArg] "}";
GTNamed.     GType ::= UIdent GTNamedParams ;
GTTVar.      GType ::= LIdent ;

-- Session types
GSessChoice. GSessChoice ::= GChoiceLabel "=>" GSession1 ;
separator nonempty GSessChoice "," ;

GSessTy.   GSessOrTy ::= GType ;
GSessSess. GSessOrTy ::= GSession1 ;

GSessRec. GSession1 ::= "rec" UIdent "." GSession2 ;

GSessGet. GSession2 ::= "?" "[" GSessOrTy "]" GSession1 ;
GSessPut. GSession2 ::= "!" "[" GSessOrTy "]" GSession1 ;
GSessSel. GSession2 ::= "+" "[" [GSessChoice] "]" ;
GSessCho. GSession2 ::= "&" "[" [GSessChoice] "]" ;

GSessEnd. GSession3 ::= ;
-- recursion variable surrounded in <> to distinguish it from GTNamed in
-- GSessGet and GSessPut
GSessVar.     GSession3 ::= "<" UIdent ">" ;
GSessVarDual. GSession3 ::= "<" "dual" UIdent ">" ;

coercions GSession 3 ;

-- Struct element is an accessor followed by a type
GTStructFieldName. GTStructFieldName ::= LIdent ;
GTStructElement.   GTStructElement   ::= GTStructFieldName "::" GType ;
separator          nonempty GTStructElement "," ;

GTEnumElemNoTy.   GTEnumElem ::= LIdent ;
GTEnumElemWithTy. GTEnumElem ::= LIdent GType ;
separator         nonempty GTEnumElem "," ;

GTStructDef. GTStructDef ::= [GTVars] "{" [GTStructElement] "}" ;
GTEnumDef.   GTEnumDef ::= [GTVars] "{" [GTEnumElem] "}" ;

-- Annotations for the fields of hardware areas
GTAreaAnnPad.   GTAreaAnn ::= "pad" GAnyInt ;
GTAreaAnnAlign. GTAreaAnn ::= "align" GAnyInt ;
separator nonempty GTAreaAnn "," ;

-- A single element list collecting several annotations
GTAreaAnnCol. GTAreaAnnCol ::= "[" [GTAreaAnn] "]" ;
(:[]). [GTAreaAnnCol] ::= GTAreaAnnCol ;

GTAreaElementPlain. GTAreaElement ::= GTStructElement ;
GTAreaElementAnn.   GTAreaElement ::= [GTAreaAnnCol] GTStructElement ;
separator nonempty GTAreaElement "," ;

GTAreaDef.   GTAreaDef ::= "{" [GTAreaElement] "}" ;

GELetIdent.  GELetIdent ::= LIdent "=" GExpr ;
terminator   GELetIdent ";" ;

GELetExpr.   GELetExpr ::= [GELetIdent] GExpr ;

GEAppArg.    GEAppArg ::= GExpr ;
separator    nonempty GEAppArg "," ;

GEAbsArg.    GEAbsArg ::= LIdent ;
terminator   nonempty GEAbsArg "" ;

-- tuple args can't be empty (GEUnit handles this)
GETupArg.    GETupArg ::= GExpr ;
separator    nonempty GETupArg "," ;

----- Begin operators -----

-- Haskell precedence 0
--GERightApp.  GExpr0 ::= GExpr0 "$>" GExpr1 ;
--GELeftApp.   GExpr1 ::= GExpr2 "<$" GExpr1 ;

-- Haskell precedence 1
--GEBind.      GExpr2 ::= GExpr2 ">>=" GExpr3 ;
--GESeq.       GExpr2 ::= GExpr2 ">>"  GExpr3 ;

-- Haskell precedence 2
GELogOr.     GExpr3 ::= GExpr4 "||" GExpr3 ;

-- Haskell precedence 3
GELogAnd.    GExpr4 ::= GExpr5 "&&" GExpr4 ;

-- Haskell precedence 4
GEEq.        GExpr5 ::= GExpr6 "==" GExpr6 ;
GENotEq.     GExpr5 ::= GExpr6 "!=" GExpr6 ;
GEGtEq.      GExpr5 ::= GExpr6 ">=" GExpr6 ;
GELtEq.      GExpr5 ::= GExpr6 "<=" GExpr6 ;
GEGt.        GExpr5 ::= GExpr6 ">"  GExpr6 ;
GELt.        GExpr5 ::= GExpr6 "<"  GExpr6 ;
-- elem, notElem

-- Haskell precedence 5
-- cons, append

-- Haskell precedence 6
GEPlus.      GExpr7 ::= GExpr7 "+" GExpr8 ;
GEMinus.     GExpr7 ::= GExpr7 "-" GExpr8 ;

-- Haskell precedence 7
GETimes.     GExpr8 ::= GExpr8 "*" GExpr9 ;
GEDiv.       GExpr8 ::= GExpr8 "/" GExpr9 ;
GEMod.       GExpr8 ::= GExpr8 "%" GExpr9 ;
-- rem, quot, div

-- Haskell precedence 8
-- Power operators
GEBitCat.    GExpr9  ::= GExpr10 "#" GExpr9 ;

-- Haskell precedence 9
GERightComp. GExpr10 ::= GExpr10 "o>" GExpr11 ;
GELeftComp.  GExpr11 ::= GExpr12 "<o" GExpr11 ;

GELogNot.    GExpr12 ::= "!" GExpr12 ;

----- End operators -----

GEIf.        GExpr13 ::= "if" GExpr "{" GELetExpr "}" "else" "{" GELetExpr "}" ;

GEApp.       GExpr14 ::= GExpr14 "(" [GEAppArg] ")" ;

GEAbs.       GExpr15 ::= "\\" [GEAbsArg] "->" "{" GELetExpr "}" ;

GEScopeIdent. GEScopeArg ::= "::" LIdent ;
GEScopeIndex. GEScopeArg ::= "::" DecInt ;

GETrue.      GExpr16 ::= "true" ;
GEFalse.     GExpr16 ::= "false" ;
GEInt.       GExpr16 ::= DecInt ;
GEVar.       GExpr16 ::= LIdent ;
GEScopedFn.  GExpr16 ::= UIdent GEScopeArg ;
GEUnit.      GExpr16 ::= GUnit ;
GETup.       GExpr16 ::= "{" [GETupArg] "}" ;

coercions    GExpr 16 ;

-- Process grammar

GProcName. GProcName ::= UIdent ;

-- Builtin channels can have "::" in their name
GChan.  GChan ::= "^" GScopedIdent ;

GProcNew.     GProc1 ::= "new" "(" "^" LIdent "," "^" LIdent ")"
  ":" GSession   ";" GProc1 ;

GProcLet.     GProc1 ::= LIdent "="      GExpr       ";" GProc1 ;
GProcGetExpr. GProc1 ::= GChan  "->"     LIdent      ";" GProc1 ;
GProcGetChan. GProc1 ::= GChan  "->" "^" LIdent      ";" GProc1 ;

GProcPutExpr. GProc1 ::= GChan  "<-"     GExpr       ";" GProc1 ;
GProcPutChan. GProc1 ::= GChan  "<-"     GChan       ";" GProc1 ;

GProcSel.     GProc1 ::= GChan "select" GChoiceLabel ";" GProc1 ;

GConcChoice.  GConcChoice ::= GChoiceLabel "=>" GProc ;
separator nonempty GConcChoice "," ;

GProcCho.     GProc1 ::= GChan "case"
  "{"
    [ GConcChoice ]
  "}" ;

GRecInitializerExpr. GRecInitializer ::=     LIdent "=" GExpr ;
GRecInitializerChan. GRecInitializer ::= "^" LIdent "=" GChan ;
separator nonempty GRecInitializer "," ;

GProcRec.   GProc1 ::= "rec" GProcName "(" [GRecInitializer] ")"
  "{" GProc "}" ;

GProcParamExpr. GProcParam ::= GExpr ;
GProcParamChan. GProcParam ::= GChan ;
separator GProcParam "," ;

GProcNamed. GProc1 ::= GProcName "(" [GProcParam] ")" ;
GProcInact. GProc1 ::= ;

GParElem. GParElem ::= GProc1 ;
separator nonempty GParElem "|" ;

GProcPar.   GProc2 ::= "(" GParElem "|" [GParElem] ")" ;

coercions GProc 2 ;

-- Top level grammar

GTDefStruct. GTypeDef ::= "struct" UIdent GTStructDef ;
GTDefEnum.   GTypeDef ::= "enum" UIdent GTEnumDef ;
GTDefProto.  GTypeDef ::= "protocol" UIdent "=" GSession ;
GTDefArea.   GTypeDef ::= "area" UIdent "@" GAnyInt GTAreaDef ;

GFuncName. GFuncName ::= LIdent ;
GFuncArg.  GFuncArg  ::= LIdent ;
separator nonempty GFuncArg "," ;

GProcArgSess.  GProcArg ::= "^" LIdent ":" GSession ;
GProcArgType.  GProcArg ::=     LIdent ":" GType ;
separator GProcArg "," ;

GGlobal.  GGlobal  ::= LIdent "=" GExpr ";" ;
GFunc.    GFunc    ::= "func" GFuncName "(" [GFuncArg] ")"
  "{"
    GExpr
  "}" ;

GProcDef. GProcDef ::= "proc" GProcName "(" [GProcArg] ")"
  "{"
    GProc
  "}" ;

GHwProc.  GHwProc  ::= "hwproc" GProcName
  "{"
    "interrupt" HexInt ";"
    "init" "=" "{" GProc "}"
  "}" ;

rules GTopDef ::= GTypeDef | GGlobal | GFunc | GProcDef | GHwProc ;
terminator  GTopDef "" ;

GProg.      GProg ::= [GTopDef] ;

comment "//" ;

-- Only export nessecary parsers.
entrypoints GProg, GTopDef, GTypeDef, GType, GSession, GExpr, GProc, GProcArg,
            GHwProc ;

