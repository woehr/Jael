-- Note: All grammar labels and productions are prefixed with "G" in order to
-- differentiate them from types in the target language that may have the same
-- name

-- Tokens

token UIdent (upper (letter | digit | '_')*) ;
token LIdent (lower (letter | digit | '_')*) ;
token LScopedIdent (lower (letter | digit | '_' | {"::"})*) ;
token DecInt ('0' | ('~'? ["123456789"] digit*)) ;
token HexInt ({"0x"} ["0123456789abcdefABCDEF"]+) ;
token OctInt ({"0o"} ["01234567"]+) ;
token BinInt ({"0b"} ["01"]+) ;

rules GAnyInt ::= DecInt | HexInt | OctInt | BinInt ;

GChoiceLabel. GChoiceLabel ::= LIdent ;

-- Sequential Types

GTNamedParam. GTNamedParam ::= GType ;
separator GTNamedParam "," ;

GTNamedNoParam. GTNamedParams ::= ;
GTNamedParams.  GTNamedParams ::= "(" [GTNamedParam] ")" ;

GTTupArg.    GTTupArg ::= GType ;
separator    nonempty GTTupArg "," ;

GIntParam1.      GIntParamOne ::= "<" GAnyInt ">" ;
GIntParam1Empty. GIntParamOne ::= ;

GIntParam2.      GIntParamTwo ::= "<" GAnyInt "," GAnyInt ">" ;
GIntParam2Lower. GIntParamTwo ::= "<" GAnyInt "," ">" ;
GIntParam2Upper. GIntParamTwo ::= "<" "," GAnyInt ">" ;
GIntParam2Empty. GIntParamTwo ::= ;

GTBit.       GType ::= "Bit"    GIntParamOne ;
GTBool.      GType ::= "Bool" ;
GTBuffer.    GType ::= "Buffer" GIntParamTwo ;
GTInt.       GType ::= "Int"    GIntParamTwo ;
GTUnit.      GType ::= "Void" ;
GTTup.       GType ::= "(" GTTupArg "," [GTTupArg] ")";
GTNamed.     GType ::= UIdent GTNamedParams ;
GTTVar.      GType ::= LIdent ;

-- Session Types

GSessChoice. GSessChoice ::= GChoiceLabel "=>" GSession1 ;
separator nonempty GSessChoice "," ;

GSessTy.   GSessOrTy ::= GType ;
GSessSess. GSessOrTy ::= GSession1 ;

GSessRec. GSession1 ::= "rec" UIdent "." GSession2 ;

GSessGet. GSession2 ::= "?" "[" GSessOrTy "]" GSession1 ;
GSessPut. GSession2 ::= "!" "[" GSessOrTy "]" GSession1 ;
GSessSel. GSession2 ::= "+" "[" [GSessChoice] "]" ;
GSessCho. GSession2 ::= "&" "[" [GSessChoice] "]" ;

GSessEnd. GSession3 ::= ;
-- recursion variable surrounded in <> to distinguish it from GTNamed in
-- GSessGet and GSessPut
GSessVar.     GSession3 ::= "<" UIdent ">" ;
GSessVarDual. GSession3 ::= "<" "dual" UIdent ">" ;

coercions GSession 3 ;

-- Enums

GTEnumElem. GTEnumElem ::= LIdent GType ;
separator nonempty GTEnumElem "," ;

GTEnumDef.  GTEnumDef   ::= "{" [GTEnumElem] "}" ;

-- Structs

---- Annotations
GTStructAnnPad.   GTStructAnn ::= "pad" GAnyInt ;
GTStructAnnAlign. GTStructAnn ::= "align" GAnyInt ;
separator nonempty GTStructAnn "," ;

---- A single element list collecting several annotations
GTStructAnnCol. GTStructAnnCol ::= "[" [GTStructAnn] "]" ;

GTStructElement.    GTStructElement ::=                LIdent ":" GType ;
GTStructElementAnn. GTStructElement ::= GTStructAnnCol LIdent ":" GType ;
separator nonempty GTStructElement "," ;

GTStructDef. GTStructDef ::= "{" [GTStructElement] "}" ;

-- Expressions

GELetIdent.  GELetIdent ::= LIdent "=" GExpr ;
terminator   GELetIdent ";" ;

GELetExpr.   GELetExpr ::= [GELetIdent] GExpr ;

GEAppArg.    GEAppArg ::= GExpr ;
separator    nonempty GEAppArg "," ;

GETupArg.    GETupArg ::= GExpr ;
separator    nonempty GETupArg "," ;

----- Begin operators -----

-- Haskell precedence 2
GELogOr.     GExpr3 ::= GExpr4 "||" GExpr3 ;

-- Haskell precedence 3
GELogAnd.    GExpr4 ::= GExpr5 "&&" GExpr4 ;

-- Haskell precedence 4
GEEq.        GExpr5 ::= GExpr6 "==" GExpr6 ;
GENotEq.     GExpr5 ::= GExpr6 "!=" GExpr6 ;
GEGtEq.      GExpr5 ::= GExpr6 ">=" GExpr6 ;
GELtEq.      GExpr5 ::= GExpr6 "<=" GExpr6 ;
GEGt.        GExpr5 ::= GExpr6 ">"  GExpr6 ;
GELt.        GExpr5 ::= GExpr6 "<"  GExpr6 ;
-- elem, notElem

-- Haskell precedence 5
-- cons, append

-- Haskell precedence 6
GEPlus.      GExpr7 ::= GExpr7 "+" GExpr8 ;
GEMinus.     GExpr7 ::= GExpr7 "-" GExpr8 ;

-- Haskell precedence 7
GETimes.     GExpr8 ::= GExpr8 "*" GExpr9 ;
GEDiv.       GExpr8 ::= GExpr8 "/" GExpr9 ;
GEMod.       GExpr8 ::= GExpr8 "%" GExpr9 ;
-- rem, quot, div

-- Haskell precedence 8
-- Power operators
GEBitCat.    GExpr9  ::= GExpr10 "#" GExpr9 ;

-- Haskell precedence 9

GELogNot.    GExpr12 ::= "!" GExpr12 ;

----- End operators -----

GEIf.        GExpr13 ::= "if" GExpr "{" GELetExpr "}" "else" "{" GELetExpr "}" ;

GETrue.      GExpr16 ::= "true" ;
GEFalse.     GExpr16 ::= "false" ;
GEInt.       GExpr16 ::= DecInt ;
GEVar.       GExpr16 ::= LIdent ;
GEApp.       GExpr16 ::= LIdent       "(" [GEAppArg] ")" ;
GEAppScoped. GExpr16 ::= LScopedIdent "(" [GEAppArg] ")" ;
GEUnit.      GExpr16 ::= "void" ;
GETup.       GExpr16 ::= "(" GETupArg "," [GETupArg] ")" ;

coercions    GExpr 16 ;

-- Process grammar

GProcName. GProcName ::= UIdent ;

-- Builtin channels can have "::" in their name
GChan.        GChan ::= "^" LIdent ;
GChanScoped.  GChan ::= "^" LScopedIdent ;

GProcNew.     GProc1 ::= "new" "(" "^" LIdent "," "^" LIdent ")"
  ":" GSession   ";" GProc1 ;

GProcLet.     GProc1 ::= LIdent "="      GExpr       ";" GProc1 ;
GProcGetExpr. GProc1 ::= GChan  "->"     LIdent      ";" GProc1 ;
GProcGetChan. GProc1 ::= GChan  "->" "^" LIdent      ";" GProc1 ;
GProcGetIgn.  GProc1 ::= GChan  "->"     "_"         ";" GProc1 ;

GProcPutExpr. GProc1 ::= GChan  "<-"     GExpr       ";" GProc1 ;
GProcPutChan. GProc1 ::= GChan  "<-"     GChan       ";" GProc1 ;

GProcSel.     GProc1 ::= GChan "select" GChoiceLabel ";" GProc1 ;

GConcChoice.  GConcChoice ::= GChoiceLabel "=>" GProc ;
separator nonempty GConcChoice "," ;

GProcCho.     GProc1 ::= GChan "case"
  "{"
    [ GConcChoice ]
  "}" ;

GRecInitializerExpr. GRecInitializer ::=     LIdent "=" GExpr ;
GRecInitializerChan. GRecInitializer ::= "^" LIdent "=" GChan ;
separator nonempty GRecInitializer "," ;

GProcRec.   GProc1 ::= "rec" GProcName "(" [GRecInitializer] ")"
  "{" GProc "}" ;

GProcParamExpr. GProcParam ::= GExpr ;
GProcParamChan. GProcParam ::= GChan ;
separator GProcParam "," ;

GProcNamed. GProc1 ::= GProcName "(" [GProcParam] ")" ;
GProcFwd.   GProc1 ::= GChan "<->" GChan ;
GProcInact. GProc1 ::= ;

GParElem. GParElem ::= GProc1 ;
separator nonempty GParElem "|" ;

GProcPar.   GProc2 ::= "(" GParElem "|" [GParElem] ")" ;

coercions GProc 2 ;

-- Top level grammar

GTDefStruct. GTypeDef ::= "struct"   UIdent GTStructDef ;
GTDefEnum.   GTypeDef ::= "enum"     UIdent GTEnumDef ;
GTDefProto.  GTypeDef ::= "protocol" UIdent ":" GSession ";" ;
GTDefArea.   GTypeDef ::= "area"     UIdent "@" GAnyInt ":" UIdent ";" ;

GFuncName. GFuncName ::= LIdent ;
GFuncArg.  GFuncArg  ::= LIdent ":" GType ;
separator nonempty GFuncArg "," ;

GProcArgSess.  GProcArg ::= "^" LIdent ":" GSession ;
GProcArgType.  GProcArg ::=     LIdent ":" GType ;
separator GProcArg "," ;

GGlobal.  GGlobal  ::= LIdent "=" GExpr ";" ;
GFunc.    GFunc    ::= "func" GFuncName "(" [GFuncArg] ")" ":" GType
  "{"
    GExpr
  "}" ;

GProcDef. GProcDef ::= "proc" GProcName "(" [GProcArg] ")"
  "{"
    GProc
  "}" ;

rules GTopDef ::= GTypeDef | GGlobal | GFunc | GProcDef ;
terminator  GTopDef "" ;

GProg.      GProg ::= [GTopDef] ;

comment "//" ;

-- Only export nessecary parsers.
entrypoints GProg, GTopDef, GTypeDef, GType, GSession, GExpr, GProc, GProcArg ;

